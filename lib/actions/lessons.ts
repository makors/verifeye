'use server';

import { db } from "@/lib/db";
import { lesson, lessonItem, userLesson, lessonItemTypeEnum } from "@/lib/schema";
import { fundamentalsCourse } from "@/lib/learning-data";
import { v4 as uuidv4 } from "uuid";
import { eq } from "drizzle-orm";

/**
 * Check if lessons exist in the database
 */
export async function checkLessonsExist() {
  try {
    const existingLessons = await db.select({ count: { id: lesson.id } })
      .from(lesson)
      .limit(1);
    
    return existingLessons.length > 0;
  } catch (error) {
    console.error("Error checking if lessons exist:", error);
    return false;
  }
}

/**
 * Seed lessons from the fundamentals course data
 * Note: This only creates the lesson records, not the lesson items
 */
export async function seedLessons() {
  try {
    console.log("Starting to seed lessons...");
    const lessonsExist = await checkLessonsExist();
    
    if (lessonsExist) {
      console.log("Lessons already exist, skipping seed");
      return { success: true, message: "Lessons already exist" };
    }
    
    // Create lessons from the fundamentals course
    const lessonInserts = fundamentalsCourse.lessons.map((lessonData) => ({
      id: uuidv4(),
      title: lessonData.title,
      description: lessonData.description,
      order: lessonData.id, // Use the id as the order
      xpReward: lessonData.points || 0,
      isPublished: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    }));
    
    console.log(`Inserting ${lessonInserts.length} lessons`);
    await db.insert(lesson).values(lessonInserts);
    
    console.log("Lessons seeded successfully");
    return { success: true };
  } catch (error) {
    console.error("Error seeding lessons:", error);
    return { success: false, error: "Failed to seed lessons" };
  }
}

/**
 * Create user lessons and lesson items for a specific user
 */
export async function createUserLessons(userId: string) {
  try {
    console.log(`Creating user lessons for user: ${userId}`);
    
    // Check if user already has lessons
    const existingUserLessons = await db.select({ count: { id: userLesson.id } })
      .from(userLesson)
      .where(eq(userLesson.userId, userId))
      .limit(1);
    
    if (existingUserLessons.length > 0) {
      console.log("User already has lessons, skipping creation");
      return { success: true, message: "User lessons already exist" };
    }
    
    // Get all lessons
    const lessons = await db.select().from(lesson).orderBy(lesson.order);
    
    if (lessons.length === 0) {
      console.log("No lessons found, seeding lessons first");
      await seedLessons();
      lessons.push(...await db.select().from(lesson).orderBy(lesson.order));
    }
    
    // Create user lessons
    const userLessonInserts = lessons.map((lessonData) => ({
      id: uuidv4(),
      userId,
      lessonId: lessonData.id,
      isCompleted: false,
      progress: 0,
      lastAccessedAt: new Date(),
      createdAt: new Date(),
      updatedAt: new Date(),
    }));
    
    console.log(`Inserting ${userLessonInserts.length} user lessons`);
    await db.insert(userLesson).values(userLessonInserts);
    
    // Create user-specific lesson items for each lesson
    console.log("Creating user-specific lesson items");
    for (const lessonData of lessons) {
      // Create a default text item for each lesson
      await db.insert(lessonItem).values({
        id: uuidv4(),
        lessonId: lessonData.id,
        userId,
        type: "text",
        content: `Welcome to the lesson on ${lessonData.title}. This content will be generated by AI.`,
        order: 1,
        isAiGenerated: true,
        createdAt: new Date(),
        updatedAt: new Date(),
      });
      
      // Create an interactive email item
      await db.insert(lessonItem).values({
        id: uuidv4(),
        lessonId: lessonData.id,
        userId,
        type: "interactive_email",
        content: null, // Will be generated later
        order: 2,
        isAiGenerated: true,
        metadata: { prompt: `Create an interactive email exercise for ${lessonData.title}` },
        createdAt: new Date(),
        updatedAt: new Date(),
      });
      
      // Create an interactive text item
      await db.insert(lessonItem).values({
        id: uuidv4(),
        lessonId: lessonData.id,
        userId,
        type: "interactive_text",
        content: null, // Will be generated later
        order: 3,
        isAiGenerated: true,
        metadata: { prompt: `Create an interactive text exercise for ${lessonData.title}` },
        createdAt: new Date(),
        updatedAt: new Date(),
      });
    }
    
    console.log("User lessons and lesson items created successfully");
    return { success: true };
  } catch (error) {
    console.error("Error creating user lessons:", error);
    return { success: false, error: "Failed to create user lessons" };
  }
}

/**
 * Initialize lessons for a new user
 * This function checks if lessons exist, seeds them if needed, and creates user lessons and lesson items
 */
export async function initializeUserLessons(userId: string) {
  try {
    console.log(`Initializing lessons for user: ${userId}`);
    
    // Check if lessons exist, seed if needed
    const lessonsExist = await checkLessonsExist();
    if (!lessonsExist) {
      console.log("No lessons found, seeding lessons");
      await seedLessons();
    }
    
    // Create user lessons and lesson items
    const result = await createUserLessons(userId);
    
    return result;
  } catch (error) {
    console.error("Error initializing user lessons:", error);
    return { success: false, error: "Failed to initialize user lessons" };
  }
} 